@page "/create"
@using TheMall.Data.CanvasData
@using System.Drawing
@using Blazor.Extensions
@using Blazor.Extensions.Canvas;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions.Canvas.WebGL;
@using BlazorColorPicker

<h3>CanvasCreateMap</h3>

@*<canvas  @onmousedown="MouseDown" @onmouseup="MouseUp" height="900" width="900">
</canvas>
*@
<button @onclick="() => ToolChanger(DrawTool.square)" style="align-content:center">Square</button>
<button @onclick="() => ToolChanger(DrawTool.line)" style="align-content:center">Line</button>
<button @onclick="() => ToolChanger(DrawTool.singleLine)" style="align-content:center">Line</button>
<button @onclick="() => ToolChanger(DrawTool.circle)" style="align-content:center">Circle</button>
<button @onclick="() => ToolChanger(DrawTool.fill)" style="align-content:center">Circle</button>
<button @onclick="Undo" style="align-content:center">Undo</button>

<button class="btn btn-primary" @onclick="OnColorPickerOpen">
    <div style="background-color:@color" class="buttonColor"></div> Select a Color
</button>

<input id="fillBox" type="checkbox" @bind-value="@fill" />
<label for="fillBox"> Fill box</label>
<br>

<ColorPicker Title="My Blazor ColorPicker" IsOpened="isOpened" Closed="OnColorPickerClosed" MyColor="@color">
</ColorPicker>

<div class="canvasStyle" tabindex="0" @onmousedown="MouseDown" @onmouseup="MouseUp">
    <BECanvas Width="1200" Height="400" @ref="canvasRef" />
</div>

@code {
    private int clicks = 0;
    private Point pointOnEnter;
    private Point pointOnExit;
    private BECanvasComponent? canvasRef;
    private Canvas2DContext ctx;
    private DrawTool selectedTool = DrawTool.line;
    private object drawing;
    bool isOpened = false;
    string color = "#F1F7E9";
    private bool fill;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.ctx = await canvasRef.CreateCanvas2DAsync();

    }

    private async void Undo()
    {
        await ctx.RestoreAsync();

    }

    protected void ToolChanger(DrawTool tool)
    {
        clicks = 0;
        selectedTool = tool;
    }


    private async void MouseDown(MouseEventArgs args)
    {
        clicks++;
        pointOnEnter = new Point((int)args.OffsetX, (int)args.OffsetY);

    }

    private async void MouseUp(MouseEventArgs args)
    {
        pointOnExit = new Point((int)args.OffsetX, (int)args.OffsetY);

        DrawingObjectByTool();

    }

    private async void DrawingObjectByTool()
    {
        await ctx.BeginBatchAsync();
        if (fill)
            await ctx.SetFillStyleAsync(color);

        switch (selectedTool)
        {
            case DrawTool.circle:

                break;
            case DrawTool.singleLine:
                if (clicks == 1)
                    await ctx.MoveToAsync(pointOnEnter.X, pointOnEnter.Y);
                else
                {
                    await ctx.LineToAsync(pointOnExit.X, pointOnExit.Y);
                    if (fill)
                        await ctx.FillAsync();
                }
                await ctx.StrokeAsync();
                break;
            case DrawTool.line:
                await ctx.MoveToAsync(pointOnEnter.X, pointOnEnter.Y);
                await ctx.LineToAsync(pointOnExit.X, pointOnExit.Y);
                await ctx.StrokeAsync();
                await ctx.RestoreAsync();
                break;
            case DrawTool.square:
                var rect = new RectangleF(Math.Min(pointOnEnter.X, pointOnExit.X),
                           Math.Min(pointOnEnter.Y, pointOnExit.Y),
                           Math.Abs(pointOnEnter.X - pointOnExit.X),
                           Math.Abs(pointOnEnter.Y - pointOnExit.Y));
                if (fill)
                {

                    await ctx.StrokeRectAsync(rect.X, rect.Y, rect.Width, rect.Height);
                    await ctx.FillRectAsync(rect.X, rect.Y, rect.Width, rect.Height);

                }
                else
                    await ctx.StrokeRectAsync(rect.X, rect.Y, rect.Width, rect.Height);
                break;
        }

        await ctx.EndBatchAsync();
    }

    private void OnColorPickerOpen()
    {
        isOpened = true;
    }

    private void OnColorPickerClosed(string value)
    {
        color = value;
        isOpened = false;
    }
}
