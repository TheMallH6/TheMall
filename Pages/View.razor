@page "/view"


@using Newtonsoft.Json
@using TheMall.Data.CanvasData
@using System.Drawing
@using Blazor.Extensions
@using Blazor.Extensions.Canvas;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions.Canvas.WebGL;
@using BlazorColorPicker
@using System.Collections.Generic;
@using TheMall.Data;
@using TheMall.Data.Modles;

@inject AppState AppState
@inject ISessionManager sManager

<h3>Hej @AppState.UserName</h3>

<div style="display: inline-block;">
    <div class="canvasStyle" tabindex="0" style="float: left;">
        <BECanvas Width="600" Height="500" @ref="canvasRef" />
    </div>

    <div style="float: right; width: 300px; margin-left: 30px;">
        <h3>Vælg og vis kort.</h3>
        <br />
        <div>

            <button class="drawBTN drawBTNsizeL" @onclick="BeginDrawMap" style="align-content:center">Vis dit kort</button>
        </div>
        <div>
            <label for="mall">Vælg Etage: </label>
        </div>
        <div>
            <select @bind="mapLayer" class="form-control selectpicker">
                @if (maps != null)
                {
                    @foreach (var map in maps)
                    {
                        @if (map == null)
                        {
                            continue;
                        }
                        <option value="@map.layer">@map.layer</option>
                    }
                }
            </select>
        </div>
    </div>
</div>

@code {
    private BECanvasComponent? canvasRef;
    bool isHidden = true;
    private int mapLayer;
    private List<Map> maps { get; set; } = new List<Map>();
    private RestCaller restCaller { get; set; } = new RestCaller();
    private List<ComponentV> Components { get; set; } = new List<ComponentV>();
    private Canvas2DContext ctx;
    string baseStrokeColor = "#777";


    protected override async Task OnInitializedAsync()
    {
        sManager.OnChange += UpdateMapList;

    if (AppState.Credentials.Role != "Redaktør")
        {
            isHidden = false;
        }
        else
        {

            isHidden = true;
        }

        try
        {
            UpdateMapList();
        }
        catch (Exception)
        {


        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.ctx = await canvasRef.CreateCanvas2DAsync();
    }

    //If the drop down with malls changes get map data from api
    //Then update the dropdown with showing what map to show by layer
    private async void UpdateMapList()
    {
        maps = await restCaller.GetMap(sManager.GetKey("MallID"));
        StateHasChanged();
    }

    //Draw map using canvas.drawmap
    private void BeginDrawMap()
    {
        Canvas canvas = new Canvas();
        Components.Clear();
        for (int i = 0; i < maps.Count; i++)
        {
            if (mapLayer == maps[i].layer)
            {
                MapDictionaryOfComps(maps[i]);
                canvas.DrawMap(ctx, Components, baseStrokeColor, canvasRef.Width, canvasRef.Height);
            }
        }
    }

    //Takes the map objects Dictonary<string,object> and converts the objects to ComponentV
    private void MapDictionaryOfComps(Map map)
    {
        foreach (var item in map.components)
        {
            var geodata = item.Value.ToString();
            var options = new JsonSerializerSettings()
                {
                    DefaultValueHandling = DefaultValueHandling.Ignore,
                    NullValueHandling = NullValueHandling.Ignore,
                };
            var components = JsonConvert.DeserializeObject<IEnumerable<ComponentV>>(geodata, options);
            foreach (var item2 in components)
            {
                Components.Add(new ComponentV(item2.Description, item2.ZIndex, item2.Geodata));
            }
        }

    }
}
